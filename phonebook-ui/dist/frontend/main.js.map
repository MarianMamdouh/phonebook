{"version":3,"sources":["./$_lazy_route_resources|lazy|groupOptions: {}|namespace object","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/jumia-phonebook-dashboard/jumia-phonebook-dashboard.component.html","./src/app/jumia-phonebook-dashboard/jumia-phonebook-dashboard.component.ts","./src/app/jumia-urls-config.ts","./src/app/services/customer.service.ts","./src/app/services/loader.service.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(() => {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = () => ([]);\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 8255;\nmodule.exports = webpackEmptyAsyncContext;","import {Component, OnInit} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {first, map, tap} from 'rxjs/operators';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n  providers: [HttpClient]\n})\nexport class AppComponent implements OnInit{\n  title = 'frontend';\n  message = '';\n\n  constructor(private http: HttpClient) { }\n\n  ngOnInit(): void {\n    this.http.get('http://localhost:9010/api/book/message').pipe(\n      first(),\n      tap(result => console.log('Message received from the server: ', result)),\n      map(result => this.message = (result as any).message)\n    ).subscribe();\n  }\n\n}\n","Message from server: {{message}}\n<dashboard></dashboard>\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport { AppComponent } from './app.component';\nimport { JumiaPhonebookDashboardComponent } from './jumia-phonebook-dashboard/jumia-phonebook-dashboard.component';\nimport { CustomerService } from './services/customer.service';\nimport { Loader } from './services/loader.service';\nimport { HttpClientModule } from '@angular/common/http';\nimport {TableModule} from 'primeng/table';\nimport {PaginatorModule} from 'primeng/paginator';\nimport {ButtonModule} from 'primeng/button';\nimport {FormsModule} from '@angular/forms';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    JumiaPhonebookDashboardComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    HttpClientModule,\n    TableModule,\n    PaginatorModule,\n    ButtonModule,\n    FormsModule\n  ],\n  providers: [CustomerService,\n  Loader],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","<!doctype html>\n<html lang=\"en\">\n<div class=\"card\">\n  <h5>Programmatic Control</h5>\n  <div class=\"p-mb-3\">\n    <p-button type=\"button\" icon=\"pi pi-chevron-left\" (click)=\"prev()\" [disabled]=\"isFirstPage()\" styleClass=\"p-button-text\"></p-button>\n    <p-button type=\"button\" icon=\"pi pi-refresh\" (click)=\"reset()\" styleClass=\"p-button-text\"></p-button>\n    <p-button type=\"button\" icon=\"pi pi-chevron-right\" (click)=\"next()\" [disabled]=\"isLastPage()\" styleClass=\"p-button-text\"></p-button>\n  </div>\n  <p-table [value]=\"customers\" [paginator]=\"true\" [rows]=\"rows\" [showCurrentPageReport]=\"true\" [(first)]=\"first\"\n           currentPageReportTemplate=\"Showing {first} to {last} of {totalRecords} entries\" [rowsPerPageOptions]=\"[10,25,50]\">\n    <ng-template pTemplate=\"header\">\n      <tr>\n        <th pSortableColumn=\"name\">Name <p-sortIcon field=\"name\"></p-sortIcon></th>\n        <th pSortableColumn=\"phone\">Phone Number <p-sortIcon field=\"phone\"></p-sortIcon></th>\n        <th pSortableColumn=\"countryName\">Country <p-sortIcon field=\"countryName\"></p-sortIcon></th>\n        <th pSortableColumn=\"valid\">Name <p-sortIcon field=\"valid\"></p-sortIcon></th>\n      </tr>\n    </ng-template>\n    <ng-template pTemplate=\"body\" let-customer>\n      <tr>\n        <td>{{customer.name}}</td>\n        <td>{{customer.phone}}</td>\n        <td>{{customer.countryName}}</td>\n        <td>{{customer.valid}}</td>\n      </tr>\n    </ng-template>\n  </p-table>\n</div>\n</html>\n","// import {Component, OnInit} from \"@angular/core\";\n// import {SelectItem} from 'primeng/api';\n// import {UserService} from '../services/user.service';\n// import {TranslateService} from '@ngx-translate/core';\n// import {PreferencesService} from \"../services/preferences.service\";\n// import {PrivilegeService} from \"../services/privilege.service\";\n import {CustomerService} from '../services/customer.service';\n// import {Router} from '@angular/router';\n import {Customer} from '../models/customer';\n// import {Preferences} from \"../models/preferences\";\n// import {LoggedInUser} from \"../models/loggedInUser\";\n//import {Page} from \"primeng/table\"\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n    selector: 'dashboard',\n    templateUrl: './jumia-phonebook-dashboard.component.html',\n    styleUrls: ['./jumia-phonebook-dashboard.component.css']\n})\nexport class JumiaPhonebookDashboardComponent implements OnInit {\n    customers: Customer[] = [];\n    first = 0;\n    rows = 10;\n    totalRecords = 50;\n    // hasOrderReadPrivilege: boolean;\n    // hasShipmentReadPrivilege: boolean;\n    // hasICustomerViewPrivilege: boolean;\n    // hasICustomerUnitViewPrivilege: boolean;\n    // languages: string[] = [\"en\", \"de\"];\n    // availableLanguages: SelectItem[] = [];\n    // selectedLanguage: string;\n    // preferences: Preferences;\n    // currentUser: LoggedInUser;\n    //\n    // users: User[] = [];\n    //\n    constructor(private customerService: CustomerService) {\n\n        // this.fillAvailableLanguages();\n        // this.selectedLanguage = this.translate.currentLang ? this.translate.currentLang : \"en\";\n        // this.authenticationService.currentUserObserver\n        //     .subscribe((user) => {\n        //         if (user) {\n        //             this.currentUser = user;\n        //             this.hasOrderReadPrivilege = this.privilegeService.hasOrderReadPrivilege();\n        //             this.hasShipmentReadPrivilege = this.privilegeService.hasShipmentReadPrivilege();\n        //             this.hasICustomerViewPrivilege = this.privilegeService.hasCustomerReadPrivilege();\n        //             this.hasICustomerUnitViewPrivilege = this.privilegeService.hasCustomerUnitReadPrivilege();\n        //         } else {\n        //             this.currentUser = null;\n        //         }\n        //     });\n        // preferencesService.currentUserPreferencesCombined.subscribe((preferences) => {\n        //     if (preferences) {\n        //         this.preferences = preferences;\n        //     }\n        // });\n    }\n\n    ngOnInit() {\n        this.customerService.getAllCustomers().then(response => {\n            this.customers = response.content;\n            console.log(this.customers);\n            }\n        ).catch();\n    }\n\n    next() {\n        this.first = this.first + this.rows;\n    }\n\n    prev() {\n        this.first = this.first - this.rows;\n    }\n\n    reset() {\n        this.first = 0;\n    }\n\n    isLastPage(): boolean {\n        return this.customers ? this.first === (this.customers.length - this.rows): true;\n    }\n\n    isFirstPage(): boolean {\n        return this.customers ? this.first === 0 : true;\n    }\n\n    // changeLanguage(): Promise<any> {\n    //     return this.translate.use(this.selectedLanguage)\n    //         .toPromise()\n    //         .then(() => true);\n    // }\n    //\n    // fillAvailableLanguages() {\n    //     for (let language of this.languages) {\n    //         this.availableLanguages.push({label: language, value: language});\n    //     }\n    // }\n    //\n    // logout() {\n    //     this.userService.logout()\n    // }\n    //\n    // isLoggedIn() {\n    //     return this.authenticationService.isLoggedIn();\n    // }\n}\n","export class JumiaUrlsConfig {\n\n    public static get ENVIROMENT(): string {\n        return \"http://localhost:9010/\";\n    }\n\n    public static get CUSTOMERS_URL(): string {\n        return this.ENVIROMENT + \"customers?\";\n    }\n}\n","// import {Injectable} from '@angular/core';\n// import {HttpClient, HttpHeaders} from '@angular/common/http';\n// import \"rxjs\";\nimport {Loader} from './loader.service';\nimport { Injectable } from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {JumiaUrlsConfig} from '../jumia-urls-config';\n\nimport { Customer } from \"../models/customer\";\n\n\n@Injectable()\nexport class CustomerService {\n\n    // username: String;\n    // password: String;\n    //\n    constructor(private http: HttpClient, private loader: Loader) {\n\n\n    }\n\n    public getAllCustomers(): Promise<any> {\n        return this.http.get(JumiaUrlsConfig.CUSTOMERS_URL).toPromise()\n            .catch(err => {\n                return Promise.reject(err.message || err);\n            });\n    }\n\n    //\n    // public get(url, additionalHeaders?, responseType?, withoutSpinner?) {\n    //     let headers = this.createHeader();\n    //     if (additionalHeaders) {\n    //         let keys = additionalHeaders.keys();\n    //         for (let key of keys) {\n    //             headers = headers.append(key, additionalHeaders.get(key));\n    //         }\n    //     }\n    //     if (withoutSpinner) {\n    //         return this.http.get(url, {headers: headers, responseType: responseType ? responseType : \"json\"}).toPromise()\n    //             .catch(err => {\n    //                 return Promise.reject(err.message || err);\n    //             });\n    //     } else {\n    //         return this.getResult(this.http.get(url, {headers: headers, responseType: responseType ? responseType : \"json\"}));\n    //     }\n    // }\n    //\n    // public post(url, parameterJson, contentType = 'application/json', additionalHeaders?) {\n    //     let headers = this.createHeader(contentType);\n    //     if (additionalHeaders) {\n    //         let keys = additionalHeaders.keys();\n    //         for (let key of keys) {\n    //             headers = headers.append(key, additionalHeaders.get(key));\n    //         }\n    //     }\n    //\n    //     return this.getResult(this.http.post(url, parameterJson, {headers: headers}));\n    // }\n    //\n    // public postWithSpinnerStopped(url, parameterJson, contentType = 'application/json', additionalHeaders?) {\n    //     let headers = this.createHeader(contentType);\n    //     let allHeaders = null;\n    //     if (additionalHeaders) {\n    //         let keys = additionalHeaders.keys();\n    //         for (let key of keys) {\n    //             headers = headers.append(key, additionalHeaders.get(key));\n    //         }\n    //     }\n    //     return (this.http.post(url, parameterJson, {headers: headers})).toPromise()\n    //         .catch(err => {\n    //             return Promise.reject(err.message || err);\n    //         });\n    // }\n    //\n    // public putWithSpinnerStopped(url, parameterJson, contentType = 'application/json', additionalHeaders?) {\n    //     let headers = this.createHeader(contentType);\n    //     let allHeaders = null;\n    //     if (additionalHeaders) {\n    //         let keys = additionalHeaders.keys();\n    //         for (let key of keys) {\n    //             headers = headers.append(key, additionalHeaders.get(key));\n    //         }\n    //     }\n    //     return (this.http.put(url, parameterJson, {headers: headers})).toPromise()\n    //         .catch(err => {\n    //             return Promise.reject(err.message || err);\n    //         });\n    // }\n    //\n    // public put(url, parameterJson, contentType = 'application/json', additionalHeaders?) {\n    //     let headers = this.createHeader(contentType);\n    //     if (additionalHeaders) {\n    //         let keys = additionalHeaders.keys();\n    //         for (let key of keys) {\n    //             headers = headers.append(key, additionalHeaders.get(key));\n    //         }\n    //     }\n    //\n    //     return this.getResult(this.http.put(url, parameterJson, {headers: headers}));\n    // }\n    //\n    // public patch(url, jsonPatch, contentType = 'application/json') {\n    //     let headers = this.createHeader(contentType);\n    //     return this.getResult(this.http.patch(url, jsonPatch, {headers: headers}));\n    // }\n    //\n    // public delete(url, contentType = 'application/json', body?) {\n    //     let headers = this.createHeader(contentType);\n    //     let json = body ? {headers: headers, body: body} : {headers: headers};\n    //\n    //     return this.getResult(this.http.delete(url, json));\n    // }\n    //\n    // public convertToPostQuery(parameterJson) {\n    //     var postQuery = [];\n    //     for (var parameter in parameterJson) {\n    //         if (encodeURIComponent(parameterJson[parameter]) != 'null') {\n    //             postQuery.push(encodeURIComponent(parameter) + \"=\" + encodeURIComponent(parameterJson[parameter]));\n    //         }\n    //     }\n    //     return postQuery.join(\"&\");\n    // }\n    //\n    // public handleError(error: any) {\n    //     console.error(\"An error occurred\", error);\n    //     return Promise.reject(error);\n    // }\n    //\n    // public getLoader() {\n    //     return this.loader;\n    // }\n    //\n    // private createHeader(contentType?) {\n    //     let headers = new HttpHeaders().set('OMS-Authorization', 'Bearer ' + localStorage.getItem(\"token\"));\n    //     if (contentType) {\n    //         headers = headers.append('Content-Type', contentType);\n    //     }\n    //     return headers;\n    // }\n    //\n    // private getResult(result) {\n    //     this.loader.animate();\n    //     return result.toPromise()\n    //         .then(res => {\n    //             this.loader.stop();\n    //             return res;\n    //         })\n    //         .catch(err => {\n    //             this.loader.stop();\n    //             return Promise.reject(err.error || err);\n    //         });\n    // }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class Loader {\n\n  // constructor() {}\n  //\n  // animationsCount: number = 0;\n  //\n  // animate() {\n  //   let element = document.getElementById('loader');\n  //   if(element) {\n  //     element.setAttribute('style', 'display:block');\n  //   }\n  //   this.animationsCount++;\n  // }\n  //\n  // stop() {\n  //   this.animationsCount--;\n  //   if(this.animationsCount == 0){\n  //     let element = document.getElementById('loader');\n  //     if(element) {\n  //       element.setAttribute('style', 'display:none');\n  //     }\n  //   }\n  // }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}